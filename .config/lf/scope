#!/bin/sh

# File preview handler for lf.


set -C -f
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"


# Display an image preview with ueberzug
# Fallback to mediainfo if preview fails
image() {
	if [ -f "$1" ] && [ -n "${DISPLAY}" ] && command -V ueberzug >/dev/null 2>&1; then
		printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' "$4" "$5" "$(($2-1))" "$(($3-1))" "$1" > "${FIFO_UEBERZUG}"
	else
		mediainfo "$6"
	fi
}


# Note that the cache file name is a function of file information, meaning if
# an image appears in multiple places across the machine, it will not have to
# be regenerated once seen.

case "$(file --dereference --brief --mime-type -- "$1")" in
  # AVIF Image
	image/avif) CACHE="${XDG_CACHE_HOME}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "${CACHE}" ] && convert "$1" "$CACHE.jpg"
		image "${CACHE}.jpg" "$2" "$3" "$4" "$5" "$1" ;;

  # Image
	image/*) image "$1" "$2" "$3" "$4" "$5" "$1" ;;

  # HTML
	text/html) lynx -width="$4" -display_charset=utf-8 -dump "$1" ;;

  # Text files (including plaintext, XML, JSON, etc.)
	text/* | */xml | application/json | application/x-ndjson) bat --terminal-width "$(($4-2))" -f "$1" ;;

  # Audio
  # First one is showing info about the audio file
  # Second one displays an spectrogram analysis image preview 
	#audio/* | application/octet-stream) mediainfo "$1" || exit 1 ;;
	audio/* | application/octet-stream) sox "$1" -n spectrogram -o ${XDG_CACHE_HOME}/lf/tmpspectrogram.png && image ${XDG_CACHE_HOME}/lf/tmpspectrogram.png "$2" "$3" "$4" "$5" "$1" ;;

  # Video
	video/* )
		CACHE="${XDG_CACHE_HOME}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "${CACHE}" ] && ffmpegthumbnailer -i "$1" -o "$CACHE" -s 0
		image "${CACHE}" "$2" "$3" "$4" "$5" "$1"
		;;

  # PDF
	*/pdf)
		CACHE="${XDG_CACHE_HOME}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "${CACHE}.jpg" ] && pdftoppm -jpeg -f 1 -singlefile "$1" "$CACHE"
		image "${CACHE}.jpg" "$2" "$3" "$4" "$5" "$1"
		;;

  # EPUB + MOBI (e-books)
	*/epub+zip|*/mobi*)
		CACHE="${XDG_CACHE_HOME}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
		[ ! -f "${CACHE}.jpg" ] && epub-thumbnailer "$1" "$CACHE.jpg" 1000
		image "${CACHE}.jpg" "$2" "$3" "$4" "$5" "$1"
		;;

  # Compressed archives
	application/x-bzip-compressed-tar|application/gzip|application/x-xz|application/x-bzip2|application/vnd.rar|application/gzip|application/x-tar|application/x-bzip-compressed-tar|application/zip|application/x-compress|application/x-7z-compressed) atool --list -- "$1" ;;

  # OpenDocument
	*opendocument*) odt2txt "$1" ;;

  # PGP-encrypted items
	application/pgp-encrypted) gpg -d -- "$1" ;;
esac
exit 1
