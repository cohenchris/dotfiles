#!/bin/sh

# File preview handler for lf.


set -C -f
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"

DEFAULT_SIZE=2160

# get_thumbnail_path(filepath)
#   filepath - generate a unique thumbnail path for this file
#
# This function fingerprints the provided file, then returns a path to the
# cache directory for the caller to use.
#
# e.g. - Fingerprint is computed as "thumb.abcdef123456789"
#        This function might return "~/.cache/lf/thumb/thumb.abcdef123456789"
get_thumbnail_path()
{
  local filepath="${1}"

  # Generate unique cache file name based on the SHA256 hash of the file.
  # Since the cache file name is a function of file information, an image which
  # appears in multiple places across the machine will use the same cache file.
  echo "${XDG_CACHE_HOME}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "${filepath}")" | sha256sum | cut -d' ' -f1)"
}


# Display an thumbnail with sixel
# Fallback to mediainfo if preview fails
#
# display_thumbnail(thumbnail_path,
#                   pane_width,
#                   pane_height,
#                   pane_horizontal_pos,
#                   pane_vertical_pos,
#                   original_file_path)
#
#   thumbnail_path      - path to the thumbnail for this file
#   pane_width          - max preview image width
#   pane_height         - max preview image height
#   pane_horizontal_pos - horizontal position of LF's preview pane
#   pane_vertical_pos   - vertical position of LF's preview pane
#   original_file_path  - path to the original file
#
# This function uses sixel (via chafa) to display the provided thumbnail image path in the terminal
display_thumbnail()
{
  local thumbnail_path="${1}"
  local pane_width="${2}"
  local pane_height="${3}"
  local pane_horizontal_pos="${4}"
  local pane_vertical_pos="${5}"
  local original_file_path="${6}"

  # Thumbnail exists and a GUI is running
	if [ -f "${thumbnail_path}" ] && [ -n "${WAYLAND_DISPLAY}" ]; then
    # Resize image
    magick convert "${thumbnail_path}" -resize "x${DEFAULT_SIZE}" +distort Resize "${thumbnail_path}"
    
    # Display image on the terminal with chafa using sixel
    preview_pane_size="$((${pane_width}-2))x${pane_height}"
    chafa "${thumbnail_path}" -f sixel -s "${preview_pane_size}"
	else
    # Fall back to mediainfo
		mediainfo "${original_file_path}"
	fi
}




# Input args to this script
FILE_PATH="${1}" # Path to file that we should preview
WIDTH="${2}" # Width of preview pane
HEIGHT="${3}" # Height of preview pane
HORIZONTAL_POS="${4}" # Horizontal position of preview pane
VERTICAL_POS="${5}" # Vertical position of preview pane

# Handle previews
case "$(file --dereference --brief --mime-type -- "${FILE_PATH}")" in

  # Image
	image/*)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}")
    [ ! -f "${THUMBNAIL_PATH}" ] && magick convert "${FILE_PATH}" "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # HTML
	text/html)
    lynx -width="${WIDTH}" -display_charset=utf-8 -dump "${FILE_PATH}"
  ;;

  # text/*                  - all unhandled text files
  # application/json        - JSON
  # inode/x-empty           - empty files
  # application/x-subrip    - SubRip video to subtitles text file
  # application/x-pem-file  - SSH private key
  text/* | application/json | inode/x-empty | application/x-subrip)
    bat --terminal-width "${WIDTH}" -f "${FILE_PATH}"
  ;;

  # Audio (spectrogram)
  audio/*)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && sox "${FILE_PATH}" -n spectrogram -o "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # Video
	video/*)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && ffmpegthumbnailer -i "${FILE_PATH}" -o "${THUMBNAIL_PATH}" -s 0 # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # PDF
	application/pdf)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && pdftoppm -jpeg -f 1 -singlefile "${FILE_PATH}" "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    # pdftoppm automatically generates a filename with a .jpg extension, we need to get rid of that
    mv "${THUMBNAIL_PATH}.jpg" "${THUMBNAIL_PATH}"
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # EPUB and MOBI ebook formats
	application/epub+zip | application/x-mobipocket-ebook)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && ebook-meta "${FILE_PATH}" --get-cover "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # JAR
  application/java-archive)
    jar tvf "${FILE_PATH}"
  ;;

  # Compressed archives
  application/x-bzip-compressed-tar | application/gzip | application/x-xz | application/x-bzip2 | application/vnd.rar | application/x-tar | application/x-bzip-compressed-tar | application/zip | application/x-compress | application/x-7z-compressed | application/zstd)
    atool --list -- "${FILE_PATH}"
  ;;

  # Torrent
  application/x-bittorrent)
    transmission-show "${FILE_PATH}"
  ;;

  # PGP-encrypted
	application/pgp-encrypted)
    gpg -d -- "${FILE_PATH}"
  ;;

  # Shared Library
  application/x-sharedlib)
    ldd "${FILE_PATH}"
  ;;

  # ISO
  application/x-iso9660-image)
    iso-info --no-header --iso9660 "${FILE_PATH}"
  ;;

  # Office documents
  application/msword | application/vnd.ms-word* | application/vnd.ms-powerpoint* | application/vnd.ms-excel* | application/x-ole-storage | *officedocument* | *opendocument*)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && gsf-office-thumbnailer -i "${FILE_PATH}" -o "${THUMBNAIL_PATH}" -s "${DEFAULT_SIZE}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # Misc binary files, guess by file extension
  application/octet-stream)
    case ${f##*.} in

      # Office documents
      doc|docx|xls|xlsx|odt|ppt|pptx)
        THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
        [ ! -f "${THUMBNAIL_PATH}" ] && gsf-office-thumbnailer -i "${FILE_PATH}" -o "${THUMBNAIL_PATH}" -s "${DEFAULT_SIZE}" # Generate thumbnail if it does not yet exist
        display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
      ;;

      # PDF
      pdf)
        THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
        [ ! -f "${THUMBNAIL_PATH}" ] && pdftoppm -jpeg -f 1 -singlefile "${FILE_PATH}" "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
        display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
      ;;

    esac
  ;;

  # No configured previewer, throw an error
  *)
    printf "\e[1;91mSorry, no preview available...\n\e[0m\n\n"
    printf "Description: \t%s\n" $(file --dereference --brief -- ${FILE_PATH})
    printf "Mime Type: \t%s\n" $(file --mime-type --dereference --brief -- ${FILE_PATH})
  ;;

esac

# If we reach here, we've somehow failed to do anything
exit 1
