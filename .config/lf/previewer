#!/bin/sh

# File preview handler for lf.


set -C -f
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"


# get_thumbnail_path(filepath)
#   filepath - generate a unique thumbnail path for this file
#
# This function fingerprints the provided file, then returns a path to the
# cache directory for the caller to use.
#
# e.g. - Fingerprint is computed as "thumb.abcdef123456789"
#        This function might return "~/.cache/lf/thumb/thumb.abcdef123456789"
get_thumbnail_path()
{
  local filepath="${1}"

  # Generate unique cache file name based on the SHA256 hash of the file.
  # Since the cache file name is a function of file information, an image which
  # appears in multiple places across the machine will use the same cache file.
  echo "${XDG_CACHE_HOME}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "${filepath}")" | sha256sum | cut -d' ' -f1)"
}


# Display an thumbnail with ueberzug
# Fallback to mediainfo if preview fails
# display_thumbnail(thumbnail_path,
#                   pane_width,
#                   pane_height,
#                   pane_horizontal_pos,
#                   pane_vertical_pos,
#                   og_file_path)
#   thumbnail_path - path to the thumbnail for this file
#   pane_width - max preview image width
#   pane_height - max preview image height
#   pane_horizontal_pos - horizontal position of LF's preview pane
#   pane_vertical_pos - vertical position of LF's preview pane
#   og_file_path - path to the original file
#
# This function uses ueberzug to display the provided thumbnail image path in the terminal
display_thumbnail()
{
  local thumbnail_path="${1}"
  local pane_width="${2}"
  local pane_height="${3}"
  local pane_horizontal_pos="${4}"
  local pane_vertical_pos="${5}"
  local og_file_path="${6}"

	if [ -f "${thumbnail_path}" ] && [ -n "${WAYLAND_DISPLAY}" ]; then
    # Display the image if the thumbnail exists and a GUI is running
    printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' "${pane_horizontal_pos}" "${pane_vertical_pos}" "$((${pane_width}-1))" "$((${pane_height}-1))" "${thumbnail_path}" > "${FIFO_UEBERZUG}"
	else
		mediainfo "${og_file_path}"
	fi
}


# Input args to this script
FILE_PATH="${1}" # Path to file that we should preview
WIDTH="${2}" # Width of preview pane
HEIGHT="${3}" # Height of preview pane
HORIZONTAL_POS="${4}" # Horizontal position of preview pane
VERTICAL_POS="${5}" # Vertical position of preview pane


# Handle previews
case "$(file --dereference --brief --mime-type -- "${FILE_PATH}")" in
  # AVIF Image
	image/avif)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}")
    [ ! -f "${THUMBNAIL_PATH}" ] && convert "${FILE_PATH}" "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # Image
	image/*)
    echo ${THUMBNAIL_PATH}
    display_thumbnail "${FILE_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}"
  ;;

  # HTML
	text/html)
    lynx -width="$4" -display_charset=utf-8 -dump "${FILE_PATH}"
  ;;

  # Text files (including plaintext, XML, JSON, etc.)
	text/* | */xml | application/json | application/x-ndjson)
    bat --terminal-width "$(($4-2))" -f "${FILE_PATH}"
  ;;

  # Audio (spectrogram)
  audio/* )
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && sox "${FILE_PATH}" -n spectrogram -o "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # Video
	video/* )
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && ffmpegthumbnailer -i "${FILE_PATH}" -o "${THUMBNAIL_PATH}" -s 0 # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # PDF
	*/pdf)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && pdftoppm -jpeg -f 1 -singlefile "${FILE_PATH}" "${THUMBNAIL_PATH}" # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # EPUB + MOBI (e-books)
	*/epub+zip|*/mobi*)
    THUMBNAIL_PATH=$(get_thumbnail_path "${FILE_PATH}") # Get path to thumbnail
    [ ! -f "${THUMBNAIL_PATH}" ] && epub-thumbnailer "${FILE_PATH}" "${THUMBNAIL_PATH}" 1000 # Generate thumbnail if it does not yet exist
    display_thumbnail "${THUMBNAIL_PATH}" "${WIDTH}" "${HEIGHT}" "${HORIZONTAL_POS}" "${VERTICAL_POS}" "${FILE_PATH}" # Display thumbnail
  ;;

  # Compressed archives
	application/x-bzip-compressed-tar|application/gzip|application/x-xz|application/x-bzip2|application/vnd.rar|application/gzip|application/x-tar|application/x-bzip-compressed-tar|application/zip|application/x-compress|application/x-7z-compressed)
    atool --list -- "${FILE_PATH}"
  ;;

  # OpenDocument
	*opendocument*)
    odt2txt "${FILE_PATH}"
  ;;

  # PGP-encrypted items
	application/pgp-encrypted)
    gpg -d -- "${FILE_PATH}"
  ;;

  # If no configured preview logic, throw an error
  *)
    printf "\e[1;91mSorry, no preview available...\e[0m\n"
  ;;

esac

# If we reach here, we've somehow failed to do anything
exit 1
