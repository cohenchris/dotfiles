# https://github.com/gokcehan/lf/blob/master/doc.md

# Note on Image Previews
#  lf should be started through a wrapper script that creates a new
#  environment for ueberzug. This command can be aliased in your
#  aliasrc.

# Basic variables
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/previewer'
set autoquit true

################################################################################
############################### COMMAND HANDLERS ###############################
################################################################################
# file open handler
cmd open ${{

  # image_scrolling(image_name)
  #   image_name - image currently being viewed
  #
  # When I open an image from the file manager in my image viewer, I want
  # to be able to press the next/previous keys to key through the rest of the
  # images in the same directory. This script "rotates" the content of a
  # directory based on the first chosen file, so that if I open the 15th image,
  # if I press next, it will go to the 16th etc.
  function image_scrolling() {
    [ -z "$1" ] && echo "usage: image_scrolling [regex] 2>&1" && exit 1
    base="$(basename "$1")"
    ls "$PWD" | awk -v BASE="$base" 'BEGIN { lines = ""; m = 0; } { if ($0 == BASE) { m = 1; } } { if (!m) { if (lines) { lines = lines"\n"; } lines = lines""$0; } else { print $0; } } END { print lines; }'
  }

  # File handlers
  case $(file --dereference --brief --mime-type -- "${f}") in

    # XCF Image
    image/x-xcf)
      setsid -f gimp ${f} >/dev/null 2>&1
    ;;

    # Image
    image/*)
      image_scrolling ${f} |
      grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
      setsid -f ${IMAGE_VIEWER} -l | while read file; do
        # Highlight selected image on lf
        [ -z "${file}" ] && continue
        #lf -remote "send select \"${file}\""
        #lf -remote "send toggle"
      done &
    ;;

    # HTML
    text/html)
      ${BROWSER} ${fx}
    ;;

    # LaTeX
    text/x-tex)
      mytex edit ${f}
    ;;

    # text/*                  - all unhandled text files
    # application/json        - JSON
    # inode/x-empty           - empty files
    # application/x-subrip    - SubRip video to subtitles text file
    # application/x-pem-file  - SSH private key
    text/* | application/json | inode/x-empty | application/x-subrip | application/x-pem-file)
      ${EDITOR} ${fx}
    ;;
    
    # Audio
    audio/*)
      mpv --audio-display=no ${f}
    ;;
    
    # Video
    video/*)
      setsid -f mpv ${f} -quiet >/dev/null 2>&1
    ;;
    
    # application/pdf                   - PDF
    # application/epub+zip              - EPUB ebook format
    # application/x-mobipocket-ebook    -  MOBI ebook format
    application/pdf | application/epub+zip | application/x-mobipocket-ebook)
      setsid -f ${PDF_VIEWER} ${fx} >/dev/null 2>&1
    ;;

    # Compressed archives
    application/x-bzip-compressed-tar | application/gzip | application/x-xz | application/x-bzip2 | application/vnd.rar | application/x-tar | application/x-bzip-compressed-tar | application/zip | application/x-compress | application/x-7z-compressed | application/zstd | application/java-archive)
      extract ${f}
    ;;

    # Torrent
    application/x-bittorrent)
      qbittorrent ${f}
    ;;
    
    # PGP-encrypted
    application/pgp-encrypted)
      ${EDITOR} ${fx}
    ;;

    # Office documents
    application/msword | application/vnd.ms-word* | application/vnd.ms-powerpoint* | application/vnd.ms-excel* | application/x-ole-storage | *opendocument* | *officedocument*)
      setsid -f libreoffice ${fx} >/dev/null 2>&1
    ;;

    # Misc binary files, guess by file extension
    application/octet-stream)
      case ${f##*.} in

        # Office documents
        doc|docx|xls|xlsx|odt|ppt|pptx)
          setsid -f libreoffice ${fx} >/dev/null 2>&1
        ;;

        # PDF
        pdf)
          setsid -f ${PDF_VIEWER} ${fx} >/dev/null 2>&1
        ;;

      esac
    ;;

    # No configured opener, throw an error
    *)
      clear; tput cup $(($(tput lines)/3)); tput bold
      set -f
      printf "ERROR: No configured opener\n"
      printf "\nFile Path: \t%s\n" "${f}"
      printf "Description: \t%s\n" $(file --dereference --brief -- ${f})
      printf "Mime Type: \t%s\n" $(file --mime-type --dereference --brief -- ${f})
      printf "\nPress enter to continue..."
      read ans
    ;;

  esac
}}


# mkdir handler
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"


# rm handler
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "${fx}"
	printf "delete? [y/N] "
	read ans
	[ $ans = "y" ] && rm -rf -- ${fx}
}}


# rename multiple files at once
cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "${fs}" ] && fs=$(basename -a ${fs}) || fs=$(ls)

    echo "${fs}" > "${tmpfile_old}"
    echo "${fs}" > "${tmpfile_new}"
    ${EDITOR} "${tmpfile_new}"

    [ "$(wc -l < "${tmpfile_old}")" -eq "$(wc -l < "${tmpfile_new}")" ] || { rm -f "${tmpfile_old}" "${tmpfile_new}"; exit 1; }

    paste "${tmpfile_old}" "${tmpfile_new}" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "${src}" = "${dst}" ] || [ -e "${dst}" ] || mv -- "${src}" "${dst}"
    done

    rm -f "${tmpfile_old}" "${tmpfile_new}"
    lf -remote "send ${id} unselect"
}}

################################################################################
#################################### BINDINGS ##################################
################################################################################
# Delete a file or directory
map D delete

# Make a new directory in the cwd
map <c-n> push :mkdir<space>

# Reload cwd and previews
map <c-r> reload

# Simple shell prompt in the file manager
map <enter> shell

# Execute file in the the shell
map x $${f}
map X !${f}

# Open file or directory
map o open "${f}"

# Renaming files
map r :rename; # rename before extension
map B bulkrename # rename in bulk
map A :rename; cmd-end # rename at very end
map R push A<c-u> # blank rename

# Open terminal in path
map W $setsid -f ${TERMINAL} >/dev/null 2>&1

# Copy file path
map Y $printf "%s" "${fx}" | waycopy
