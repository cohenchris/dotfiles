# https://github.com/gokcehan/lf/blob/master/doc.md

# Note on Image Previews
#
#  lf should be started through a wrapper script (~/.local/bin/lfub for me)
#  that creates the environment for ueberzug. This command can be be aliased
#  in your shellrc (`alias lf="lfub") or if set to a binding, should be
#  called directly instead of normal lf.

# Basic variables
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/previewer'
set autoquit true

################################################################################
############################### HANDLER FUNCTIONS ##############################
################################################################################
# mkdir handler
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"


# rm handler
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "${fx}"
	printf "delete? [y/N] "
	read ans
	[ $ans = "y" ] && rm -rf -- ${fx}
}}


# rename multiple files at once
cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "${fs}" ] && fs=$(basename -a ${fs}) || fs=$(ls)

    echo "${fs}" > "${tmpfile_old}"
    echo "${fs}" > "${tmpfile_new}"
    ${EDITOR} "${tmpfile_new}"

    [ "$(wc -l < "${tmpfile_old}")" -eq "$(wc -l < "${tmpfile_new}")" ] || { rm -f "${tmpfile_old}" "${tmpfile_new}"; exit 1; }

    paste "${tmpfile_old}" "${tmpfile_new}" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "${src}" = "${dst}" ] || [ -e "${dst}" ] || mv -- "${src}" "${dst}"
    done

    rm -f "${tmpfile_old}" "${tmpfile_new}"
    lf -remote "send ${id} unselect"
}}


# file open handler
cmd open ${{
  case $(file --mime-type "$(readlink -f ${f})" -b) in

    # Documents (including PDF, EPUB, etc.)
    application/pdf|application/epub*|application/octet-stream|application/postscript)
      setsid -f zathura ${fx} >/dev/null 2>&1
    ;;
    
    # HTML
    text/html)
      ${BROWSER} ${fx}
    ;;
    
    # Text files (including plaintext, JSON, etc.)
    text/*|application/json|inode/x-empty|application/x-subrip)
      ${EDITOR} ${fx}
    ;;
    
    # XCF Image
    image/x-xcf)
      setsid -f gimp ${f} >/dev/null 2>&1
    ;;
    
    # SVG + XML Images
    image/svg+xml)
      display -- ${f}
    ;;
    
    # Image
    image/*)
      rotdir ${f} |
      grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
      setsid -f imv 2>/dev/null |
      while read -r file; do
        # Highlight selected image on lf
        [ -z "${f}ile" ] && continue
        lf -remote "send select \"${f}ile\""
        lf -remote "send toggle"
      done &
    ;;
    
    # Audio
    audio/*|video/x-ms-asf)
      mpv --audio-display=no ${f}
    ;;
    
    # Video
    video/*)
      setsid -f mpv ${f} -quiet >/dev/null 2>&1
    ;;
    
    # PGP-encrypted items
    application/pgp-encrypted)
      ${EDITOR} ${fx}
    ;;
    
    # Office documents
    application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database)
      setsid -f libreoffice ${fx} >/dev/null 2>&1
    ;;
    
    # Compressed archives
    application/x-bzip-compressed-tar|application/gzip|application/x-xz|application/x-bzip2|application/vnd.rar|application/gzip|application/x-tar|application/x-bzip-compressed-tar|application/zip|application/x-compress|application/x-7z-compressed)
      extract ${f}
    ;;

    # Binary files
    application/octet-stream)
      case ${f##*.} in

        # Office documents
        doc|docx|xls|xlsx|odt|ppt|pptx)
          setsid -f libreoffice ${fx} >/dev/null 2>&1
        ;;

      esac
    ;;

    # If no configured opener, throw an error
    *)
      clear; tput cup $(($(tput lines)/3)); tput bold
      set -f
      printf "ERROR: No configured opener\n"
      printf "\nFile: \t\t%s\n" "${f}"
      printf "Mime Type: \t%s\n" $(file --mime-type "$(readlink -f ${f})" -b)
      printf "\nPress enter to continue..."
      read ans
    ;;

  esac
}}


################################################################################
#################################### BINDINGS ##################################
################################################################################
# Delete a file or directory
map D delete

# Make a new directory in the cwd
map <c-n> push :mkdir<space>

# Reload cwd and previews
map <c-r> reload

# Simple shell prompt in the file manager
map <enter> shell

# Execute file in the the shell
map x $${f}
map X !${f}

# Open file or directory
map o open "${f}"

# Renaming files
map r :rename; # rename before extension
map B bulkrename # rename in bulk
map A :rename; cmd-end # rename at very end
map R push A<c-u> # blank rename

# Open terminal in path
map W $setsid -f ${TERMINAL} >/dev/null 2>&1

# Copy file path
map Y $printf "%s" "${fx}" | waycopy

# Go to cwd when quitting lf
map Q &{{lf -remote "send $env:id cd $($env:OLDPWD.Replace('\','/'))"; lf -remote "send $env:id quit"}}
