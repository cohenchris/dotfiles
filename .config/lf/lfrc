# https://github.com/gokcehan/lf/blob/master/doc.md

################################################################################
#################################### BINDINGS ##################################
################################################################################

# Default settings
set ifs "\n"
set scrolloff 10
set icons true                              # enable icons
set period 1                                # interval, in seconds, for periodic checks of directory updates
set previewer '~/.config/lf/previewer'      # script to generate and display preview information and thumbnails
set autoquit true                           # automatically quit the server when there are no clients left connected
set info size:time                          # show size and timestamp for each file
set mouse true                              # allow mouse interaction
set sixel true                              # enable sixel images in preview

# Clipboard
map D delete                                # prompt to delete file
map y copy                                  # copy file
map d cut                                   # cut file
map p paste                                 # paste file
map Y $printf "%s" "${fx}" | waycopy        # copy filename to clipboard

# Renaming files
map r :rename;                              # cursor at the end of the filename, but before extension
map A :rename; cmd-end                      # cursor at the very end of the filename
map R push A<c-u>                           # rename starting with blank input field
map B bulkrename                            # rename in bulk

# Show metadata
map zh set hidden!                          # toggle hidden files
map zr set reverse!                         # reverse file sorting
map zn set info                             # clear all displayed file info
map zs set info size                        # show size of each file
map zt set info ctime                       # show last modified time of each file
map za set info size:time                   # show both size and last modified time of each file

# Sorting
map sn :set sortby natural                  # default sorting order
map ss :set sortby size; set info size      # sort by file size
map sa :set sortby atime; set info atime    # sort by last access time
map sc :set sortby ctime; set info ctime    # sort by last modified time

# File operations and navigation
map <c-n> push :mkdir<space>                # mkdir
map <c-t> push $touch<space>                # touch
map x $${f}                                 # run command in a new shell
map X !${f}                                 # run command in a new shell and wait for keypress at the end
map o open "${f}"                           # open file
map gh cd ~                                 # go home

# Misc lf commands
map <c-r> reload                            # reload cwd
map <enter> shell                           # simple shell prompt in lf
map W $setsid -f ${TERMINAL} 2>&1           # open terminal at cwd

################################################################################
############################### COMMAND HANDLERS ###############################
################################################################################
# file open handler
cmd open ${{
  case $(file --dereference --brief --mime-type -- "${f}") in

    # XCF Image
    image/x-xcf)
      setsid -f gimp ${f} >/dev/null 2>&1
    ;;

    # Image
    image/*)
      setsid -f ${IMAGE_VIEWER} "${f}"
    ;;

    # HTML
    text/html)
      setsid -f ${BROWSER} ${fx}
    ;;

    # LaTeX
    text/x-tex)
      mytex edit ${f}
    ;;

    # text/*                  - all unhandled text files
    # application/json        - JSON
    # inode/x-empty           - empty files
    # application/x-subrip    - SubRip video to subtitles text file
    # application/x-pem-file  - SSH private key
    text/* | application/json | inode/x-empty | application/x-subrip | application/x-pem-file)
      ${EDITOR} ${fx}
    ;;
    
    # Audio
    audio/*)
      mpv --audio-display=no ${f}
    ;;
    
    # Video
    video/*)
      setsid -f mpv ${f} -quiet >/dev/null 2>&1
    ;;
    
    # application/pdf                   - PDF
    # application/epub+zip              - EPUB ebook format
    # application/x-mobipocket-ebook    -  MOBI ebook format
    application/pdf | application/epub+zip | application/x-mobipocket-ebook)
      setsid -f ${PDF_VIEWER} ${fx} >/dev/null 2>&1
    ;;

    # Compressed archives
    application/x-bzip-compressed-tar | application/gzip | application/x-xz | application/x-bzip2 | application/vnd.rar | application/x-tar | application/x-bzip-compressed-tar | application/zip | application/x-compress | application/x-7z-compressed | application/zstd | application/java-archive)
      setsid -f extract ${f}
    ;;

    # Torrent
    application/x-bittorrent)
      setsid -f qbittorrent ${f}
    ;;
    
    # PGP-encrypted
    application/pgp-encrypted)
      setsid -f ${EDITOR} ${fx}
    ;;

    # Office documents
    application/msword | application/vnd.ms-word* | application/vnd.ms-powerpoint* | application/vnd.ms-excel* | application/x-ole-storage | *opendocument* | *officedocument*)
      setsid -f libreoffice ${fx} >/dev/null 2>&1
    ;;

    # Misc binary files, guess by file extension
    application/octet-stream)
      case ${f##*.} in

        # Office documents
        doc|docx|xls|xlsx|odt|ppt|pptx)
          setsid -f libreoffice ${fx} >/dev/null 2>&1
        ;;

        # PDF
        pdf)
          setsid -f ${PDF_VIEWER} ${fx} >/dev/null 2>&1
        ;;

      esac
    ;;

    # No configured opener, throw an error
    *)
      clear; tput cup $(($(tput lines)/3)); tput bold
      set -f
      printf "ERROR: No configured opener\n"
      printf "\nFile Path: \t%s\n" "${f}"
      printf "Description: \t%s\n" $(file --dereference --brief -- ${f})
      printf "Mime Type: \t%s\n" $(file --mime-type --dereference --brief -- ${f})
      printf "\nPress enter to continue..."
      read ans
    ;;

  esac
}}


# mkdir handler
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"


# rm handler
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f

  printf "You are about to delete the following:\n\n"

  while IFS= read -r file_to_delete; do
    printf "\t%s\n" "${file_to_delete}"
  done <<< "${fx}"
  printf "\n"

  printf "Are you absolutely sure? This action cannot be undone. [y/N] "

	read ans
	[ $ans = "y" ] && rm -rf -- ${fx}
}}


# rename multiple files at once
cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "${fs}" ] && fs=$(basename -a ${fs}) || fs=$(ls)

    echo "${fs}" > "${tmpfile_old}"
    echo "${fs}" > "${tmpfile_new}"
    ${EDITOR} "${tmpfile_new}"

    [ "$(wc -l < "${tmpfile_old}")" -eq "$(wc -l < "${tmpfile_new}")" ] || { rm -f "${tmpfile_old}" "${tmpfile_new}"; exit 1; }

    paste "${tmpfile_old}" "${tmpfile_new}" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "${src}" = "${dst}" ] || [ -e "${dst}" ] || mv -- "${src}" "${dst}"
    done

    rm -f "${tmpfile_old}" "${tmpfile_new}"
    lf -remote "send ${id} unselect"
}}
