#!/bin/bash

# Ensure that all yadm files are present where they should be
yadm checkout /home/${USER}

# Get sudo privileges for later
sudo ls > /dev/null

# Change yadm URL from HTTPS to SSH
yadm remote set-url origin git@github.com:cohenchris/dotfiles.git
# Decrypt the sensitive files encrypted by YADM
yadm decrypt

# Name/email for general use (e.g. notmuch)
read -p "Enter your full name: " NAME
read -p "Enter your main email: " EMAIL

cat <<EOF > ~/.config/user
export NAME="${NAME}"
export EMAIL="${EMAIL}"
EOF

################################################################################
#                        INSTALL PERSONAL PACKAGES                             #
################################################################################
# Add a PacMan visual + enable parallel downloads
echo
echo "I Love Candy!"
sudo sed '/ParallelDownloads/s/^#/ILoveCandy\n/g' -i /etc/pacman.conf

paru -Syu --noconfirm
packages_list=~/.local/backup/packages

# install all personal packages

# Count all lines that start with a letter (baically, omit commented lines)
total_pkgs=$(grep '^[a-zA-Z]' ${packages_list} | wc -l)
echo
echo "Downloading ${total_pkgs} personal packages..."
curr_pkg=1

while read pkg_name
do
  # Omit lines that are blank or commented out
  if [[ -n ${pkg_name} ]] && ! [[ ${pkg_name} =~ ^#.* ]]; then

    # Chop off descriptive comment, now left with only the name of the package
    pkg_name=$(echo ${pkg_name} | cut -d "#" -f 1)

    # Install package
    echo "Installing package ${curr_pkg}/${total_pkgs} - ${pkg_name}"
    paru -S --noconfirm ${pkg_name} > /dev/null 2>&1

    if [[ $? -ne 0 ]]
    then
      echo ${pkg_name} >> ~/FAILED_INSTALLS.TXT
    fi

    # Increment counter
    curr_pkg=$((curr_pkg+1))
  fi
done < ${packages_list}
cd

################################################################################
#                             SHELL                                            #
################################################################################
# Set location for zsh configuration files
echo
echo "Configuring zsh..."
echo "ZDOTDIR=${HOME}/.config/shell" > zshenv
sudo mv zshenv /etc/zsh/

# Change default shell to zsh for ${USER}
sudo chsh -s $(which zsh) ${USER}

# Install zsh plugins
mkdir -p ~/.local/share/zsh/plugins
cd ~/.local/share/zsh/plugins
git clone https://github.com/zdharma-continuum/fast-syntax-highlighting
git clone https://github.com/zsh-users/zsh-completions
git clone https://github.com/zsh-users/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-history-substring-search

################################################################################
#                                   MISC                                       #
################################################################################
# Download wallpapers
echo
echo "Downloading wallpapers..."
git clone git@github.com:cohenchris/wallpapers ~/.local/share/wallpapers

# Delete extraneous files in ~/
echo
echo "Deleting extraneous XDG directories..."
cd
rm -rfv Desktop Documents Music Pictures Public Templates Videos
echo "Deleting extraneous files in ~/..."
rm -rfv ~/.bash*
rm -rfv ~/.gnupg
rm -rfv ~/.viminfo
rm -rf ~/.cargo
sudo rm -rf ~/go # Don't know why this is created or why it's owned by root

# Replace notmuch config database path with whoever the ${USER} is
echo
echo "Configuring notmuch..."
sed -i "s/phrog/${USER}/g" ${HOME}/.config/notmuch/config

# Start SSHD
echo
echo "Starting SSHD..."
sudo systemctl enable sshd
sudo systemctl start sshd

# Start Docker
echo
echo "Starting and Configuring Docker..."
sudo usermod -aG docker ${USER}
sudo systemctl enable docker
sudo systemctl start docker

# Initialize password store
echo
echo "Initializing password store..."
GPG_ID=$(gpg --list-secret-keys | grep -oE '[A-F0-9]{40}')
if [ -z "${GPG_ID}" ]; then
  echo "ERROR: no GPG key present, cannot initialize password store..."
else
  pass init ${GPG_ID}
fi

if [ -f "/home/${USER}/FAILED_INSTALLS.TXT" ]; then
  echo
  echo "**************************************************"
  echo "**                  WARNING!!!                  **"
  echo "** INSTALLATION FAILED THE FOLLOWING PACKAGES   **"
  echo "**************************************************"
  echo
  cat "/home/${USER}/FAILED_INSTALLS.TXT"
  echo
  echo "**************************************************"
  echo
fi

echo "Time to reboot!"
